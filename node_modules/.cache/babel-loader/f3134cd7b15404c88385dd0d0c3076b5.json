{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDate = void 0;\n\nvar expiration_year_1 = require(\"../expiration-year\");\n\nvar is_array_1 = require(\"./is-array\");\n\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n  var firstCharacter = Number(dateString[0]);\n  var assumedYear;\n  /*\n    if the first character in the string starts with `0`,\n    we know that the month will be 2 digits.\n       '0122' => {month: '01', year: '22'}\n  */\n\n  if (firstCharacter === 0) {\n    return 2;\n  }\n  /*\n    if the first character in the string starts with\n    number greater than 1, it must be a 1 digit month\n       '322' => {month: '3', year: '22'}\n  */\n\n\n  if (firstCharacter > 1) {\n    return 1;\n  }\n  /*\n    if the first 2 characters make up a number between\n    13-19, we know that the month portion must be 1\n       '139' => {month: '1', year: '39'}\n  */\n\n\n  if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n    return 1;\n  }\n  /*\n    if the first 2 characters make up a number between\n    10-12, we check if the year portion would be considered\n    valid if we assumed that the month was 1. If it is\n    not potentially valid, we assume the month must have\n    2 digits.\n       '109' => {month: '10', year: '9'}\n    '120' => {month: '1', year: '20'} // when checked in the year 2019\n    '120' => {month: '12', year: '0'} // when checked in the year 2021\n  */\n\n\n  if (firstCharacter === 1) {\n    assumedYear = dateString.substr(1);\n    return expiration_year_1.expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n  }\n  /*\n    If the length of the value is exactly 5 characters,\n    we assume a full year was passed in, meaning the remaining\n    single leading digit must be the month value.\n       '12202' => {month: '1', year: '2202'}\n  */\n\n\n  if (dateString.length === 5) {\n    return 1;\n  }\n  /*\n    If the length of the value is more than five characters,\n    we assume a full year was passed in addition to the month\n    and therefore the month portion must be 2 digits.\n       '112020' => {month: '11', year: '2020'}\n  */\n\n\n  if (dateString.length > 5) {\n    return 2;\n  }\n  /*\n    By default, the month value is the first value\n  */\n\n\n  return 1;\n}\n\nfunction parseDate(datestring) {\n  var date;\n\n  if (/^\\d{4}-\\d{1,2}$/.test(datestring)) {\n    date = datestring.split(\"-\").reverse();\n  } else if (/\\//.test(datestring)) {\n    date = datestring.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(datestring)) {\n    date = datestring.split(/ +/g);\n  }\n\n  if (is_array_1.isArray(date)) {\n    return {\n      month: date[0] || \"\",\n      year: date.slice(1).join()\n    };\n  }\n\n  var numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(datestring);\n  var month = datestring.substr(0, numberOfDigitsInMonth);\n  return {\n    month: month,\n    year: datestring.substr(month.length)\n  };\n}\n\nexports.parseDate = parseDate;","map":{"version":3,"sources":["E:/React Projects/react-website-v1-master/node_modules/card-validator/dist/lib/parse-date.js"],"names":["Object","defineProperty","exports","value","parseDate","expiration_year_1","require","is_array_1","getNumberOfMonthDigitsInDateString","dateString","firstCharacter","Number","assumedYear","substr","expirationYear","isPotentiallyValid","length","datestring","date","test","split","reverse","isArray","month","year","slice","join","numberOfDigitsInMonth"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,SAASE,kCAAT,CAA4CC,UAA5C,EAAwD;AACpD,MAAIC,cAAc,GAAGC,MAAM,CAACF,UAAU,CAAC,CAAD,CAAX,CAA3B;AACA,MAAIG,WAAJ;AACA;AACJ;AACA;AACA;AACA;;AAEI,MAAIF,cAAc,KAAK,CAAvB,EAA0B;AACtB,WAAO,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AAEI,MAAIA,cAAc,GAAG,CAArB,EAAwB;AACpB,WAAO,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AAEI,MAAIA,cAAc,KAAK,CAAnB,IAAwBC,MAAM,CAACF,UAAU,CAAC,CAAD,CAAX,CAAN,GAAwB,CAApD,EAAuD;AACnD,WAAO,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,MAAIC,cAAc,KAAK,CAAvB,EAA0B;AACtBE,IAAAA,WAAW,GAAGH,UAAU,CAACI,MAAX,CAAkB,CAAlB,CAAd;AACA,WAAOR,iBAAiB,CAACS,cAAlB,CAAiCF,WAAjC,EAA8CG,kBAA9C,GAAmE,CAAnE,GAAuE,CAA9E;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AAEI,MAAIN,UAAU,CAACO,MAAX,KAAsB,CAA1B,EAA6B;AACzB,WAAO,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AAEI,MAAIP,UAAU,CAACO,MAAX,GAAoB,CAAxB,EAA2B;AACvB,WAAO,CAAP;AACH;AACD;AACJ;AACA;;;AACI,SAAO,CAAP;AACH;;AACD,SAASZ,SAAT,CAAmBa,UAAnB,EAA+B;AAC3B,MAAIC,IAAJ;;AACA,MAAI,kBAAkBC,IAAlB,CAAuBF,UAAvB,CAAJ,EAAwC;AACpCC,IAAAA,IAAI,GAAGD,UAAU,CAACG,KAAX,CAAiB,GAAjB,EAAsBC,OAAtB,EAAP;AACH,GAFD,MAGK,IAAI,KAAKF,IAAL,CAAUF,UAAV,CAAJ,EAA2B;AAC5BC,IAAAA,IAAI,GAAGD,UAAU,CAACG,KAAX,CAAiB,WAAjB,CAAP;AACH,GAFI,MAGA,IAAI,KAAKD,IAAL,CAAUF,UAAV,CAAJ,EAA2B;AAC5BC,IAAAA,IAAI,GAAGD,UAAU,CAACG,KAAX,CAAiB,KAAjB,CAAP;AACH;;AACD,MAAIb,UAAU,CAACe,OAAX,CAAmBJ,IAAnB,CAAJ,EAA8B;AAC1B,WAAO;AACHK,MAAAA,KAAK,EAAEL,IAAI,CAAC,CAAD,CAAJ,IAAW,EADf;AAEHM,MAAAA,IAAI,EAAEN,IAAI,CAACO,KAAL,CAAW,CAAX,EAAcC,IAAd;AAFH,KAAP;AAIH;;AACD,MAAIC,qBAAqB,GAAGnB,kCAAkC,CAACS,UAAD,CAA9D;AACA,MAAIM,KAAK,GAAGN,UAAU,CAACJ,MAAX,CAAkB,CAAlB,EAAqBc,qBAArB,CAAZ;AACA,SAAO;AACHJ,IAAAA,KAAK,EAAEA,KADJ;AAEHC,IAAAA,IAAI,EAAEP,UAAU,CAACJ,MAAX,CAAkBU,KAAK,CAACP,MAAxB;AAFH,GAAP;AAIH;;AACDd,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDate = void 0;\nvar expiration_year_1 = require(\"../expiration-year\");\nvar is_array_1 = require(\"./is-array\");\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n    var firstCharacter = Number(dateString[0]);\n    var assumedYear;\n    /*\n      if the first character in the string starts with `0`,\n      we know that the month will be 2 digits.\n  \n      '0122' => {month: '01', year: '22'}\n    */\n    if (firstCharacter === 0) {\n        return 2;\n    }\n    /*\n      if the first character in the string starts with\n      number greater than 1, it must be a 1 digit month\n  \n      '322' => {month: '3', year: '22'}\n    */\n    if (firstCharacter > 1) {\n        return 1;\n    }\n    /*\n      if the first 2 characters make up a number between\n      13-19, we know that the month portion must be 1\n  \n      '139' => {month: '1', year: '39'}\n    */\n    if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n        return 1;\n    }\n    /*\n      if the first 2 characters make up a number between\n      10-12, we check if the year portion would be considered\n      valid if we assumed that the month was 1. If it is\n      not potentially valid, we assume the month must have\n      2 digits.\n  \n      '109' => {month: '10', year: '9'}\n      '120' => {month: '1', year: '20'} // when checked in the year 2019\n      '120' => {month: '12', year: '0'} // when checked in the year 2021\n    */\n    if (firstCharacter === 1) {\n        assumedYear = dateString.substr(1);\n        return expiration_year_1.expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n    }\n    /*\n      If the length of the value is exactly 5 characters,\n      we assume a full year was passed in, meaning the remaining\n      single leading digit must be the month value.\n  \n      '12202' => {month: '1', year: '2202'}\n    */\n    if (dateString.length === 5) {\n        return 1;\n    }\n    /*\n      If the length of the value is more than five characters,\n      we assume a full year was passed in addition to the month\n      and therefore the month portion must be 2 digits.\n  \n      '112020' => {month: '11', year: '2020'}\n    */\n    if (dateString.length > 5) {\n        return 2;\n    }\n    /*\n      By default, the month value is the first value\n    */\n    return 1;\n}\nfunction parseDate(datestring) {\n    var date;\n    if (/^\\d{4}-\\d{1,2}$/.test(datestring)) {\n        date = datestring.split(\"-\").reverse();\n    }\n    else if (/\\//.test(datestring)) {\n        date = datestring.split(/\\s*\\/\\s*/g);\n    }\n    else if (/\\s/.test(datestring)) {\n        date = datestring.split(/ +/g);\n    }\n    if (is_array_1.isArray(date)) {\n        return {\n            month: date[0] || \"\",\n            year: date.slice(1).join(),\n        };\n    }\n    var numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(datestring);\n    var month = datestring.substr(0, numberOfDigitsInMonth);\n    return {\n        month: month,\n        year: datestring.substr(month.length),\n    };\n}\nexports.parseDate = parseDate;\n"]},"metadata":{},"sourceType":"script"}