{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findBestMatch = void 0;\n\nfunction hasEnoughResultsToDetermineBestMatch(results) {\n  var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {\n    return result.matchStrength;\n  }).length;\n  /*\n   * if all possible results have a maxStrength property that means the card\n   * number is sufficiently long enough to determine conclusively what the card\n   * type is\n   * */\n\n  return numberOfResultsWithMaxStrengthProperty > 0 && numberOfResultsWithMaxStrengthProperty === results.length;\n}\n\nfunction findBestMatch(results) {\n  if (!hasEnoughResultsToDetermineBestMatch(results)) {\n    return null;\n  }\n\n  return results.reduce(function (bestMatch, result) {\n    if (!bestMatch) {\n      return result;\n    }\n    /*\n     * If the current best match pattern is less specific than this result, set\n     * the result as the new best match\n     * */\n\n\n    if (Number(bestMatch.matchStrength) < Number(result.matchStrength)) {\n      return result;\n    }\n\n    return bestMatch;\n  });\n}\n\nexports.findBestMatch = findBestMatch;","map":{"version":3,"sources":["E:/React Projects/react-website-v1-master/node_modules/credit-card-type/dist/lib/find-best-match.js"],"names":["Object","defineProperty","exports","value","findBestMatch","hasEnoughResultsToDetermineBestMatch","results","numberOfResultsWithMaxStrengthProperty","filter","result","matchStrength","length","reduce","bestMatch","Number"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,SAASC,oCAAT,CAA8CC,OAA9C,EAAuD;AACnD,MAAIC,sCAAsC,GAAGD,OAAO,CAACE,MAAR,CAAe,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,aAAd;AAA8B,GAAjE,EAAmEC,MAAhH;AACA;AACJ;AACA;AACA;AACA;;AACI,SAAQJ,sCAAsC,GAAG,CAAzC,IACJA,sCAAsC,KAAKD,OAAO,CAACK,MADvD;AAEH;;AACD,SAASP,aAAT,CAAuBE,OAAvB,EAAgC;AAC5B,MAAI,CAACD,oCAAoC,CAACC,OAAD,CAAzC,EAAoD;AAChD,WAAO,IAAP;AACH;;AACD,SAAOA,OAAO,CAACM,MAAR,CAAe,UAAUC,SAAV,EAAqBJ,MAArB,EAA6B;AAC/C,QAAI,CAACI,SAAL,EAAgB;AACZ,aAAOJ,MAAP;AACH;AACD;AACR;AACA;AACA;;;AACQ,QAAIK,MAAM,CAACD,SAAS,CAACH,aAAX,CAAN,GAAkCI,MAAM,CAACL,MAAM,CAACC,aAAR,CAA5C,EAAoE;AAChE,aAAOD,MAAP;AACH;;AACD,WAAOI,SAAP;AACH,GAZM,CAAP;AAaH;;AACDX,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findBestMatch = void 0;\nfunction hasEnoughResultsToDetermineBestMatch(results) {\n    var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) { return result.matchStrength; }).length;\n    /*\n     * if all possible results have a maxStrength property that means the card\n     * number is sufficiently long enough to determine conclusively what the card\n     * type is\n     * */\n    return (numberOfResultsWithMaxStrengthProperty > 0 &&\n        numberOfResultsWithMaxStrengthProperty === results.length);\n}\nfunction findBestMatch(results) {\n    if (!hasEnoughResultsToDetermineBestMatch(results)) {\n        return null;\n    }\n    return results.reduce(function (bestMatch, result) {\n        if (!bestMatch) {\n            return result;\n        }\n        /*\n         * If the current best match pattern is less specific than this result, set\n         * the result as the new best match\n         * */\n        if (Number(bestMatch.matchStrength) < Number(result.matchStrength)) {\n            return result;\n        }\n        return bestMatch;\n    });\n}\nexports.findBestMatch = findBestMatch;\n"]},"metadata":{},"sourceType":"script"}