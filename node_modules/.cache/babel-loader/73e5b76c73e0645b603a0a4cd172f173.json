{"ast":null,"code":"import valid from \"card-validator\";\nexport default function validateInfo(values) {\n  let errors = {};\n  let creditCard = valid.number(values.cardNumber);\n  creditCard.expirationDate = valid.expirationDate(values.cardExpiration);\n  creditCard.cvv = valid.cvv(values.cardSecurityCode);\n  creditCard.cardholderName = valid.cardholderName(values.cardName);\n  creditCard.postalCode = valid.postalCode(values.cardPostalCode);\n  errors.show = true;\n  errors.variant = \"danger\";\n  errors.message = \"An unknown error occured. Please try again later\";\n  errors.cname = false;\n  errors.cnumber = false;\n  errors.ctype = false;\n  errors.cexp = false;\n  errors.ccvv = false;\n  errors.cpostal = false;\n\n  if (values.cardPostalCode === null || !values.cardPostalCode.trim()) {\n    errors.message = \"Credit card postal code is not complete\";\n  } else if (creditCard.postalCode.isValid) {\n    errors.cpostal = true;\n  } else {\n    errors.message = \"Credit card postal code is invalid\";\n  } //Card CVV expiration\n\n\n  if (values.cardSecurityCode === null || !values.cardSecurityCode.trim()) {\n    errors.message = \"Credit card CVC is not complete\";\n  } else if (creditCard.cvv.isValid) {\n    errors.ccvv = true;\n  } else {\n    errors.message = \"Credit card CVC is invalid\";\n  } //Card Expiration Verification\n\n\n  if (values.cardExpiration === null || !values.cardExpiration.trim()) {\n    errors.message = \"Credit card expiration date is not complete\";\n  } else if (creditCard.expirationDate.isValid) {\n    errors.cexp = true;\n  } else {\n    errors.message = \"Credit card expiration date is invalid\";\n  } //Card Type Verification\n\n\n  if (values.cardType === null || !values.cardType.trim() || creditCard.card === null) {\n    errors.message = \"Credit card type is not complete\";\n  } else if (creditCard.card.type && creditCard.card.type.toUpperCase() === values.cardType.toUpperCase()) {\n    errors.ctype = true;\n  } else {\n    errors.message = \"Credit card type is invalid\";\n  } //Card Number Verification\n\n\n  if (values.cardNumber === null || !values.cardNumber.trim()) {\n    errors.message = \"Credit card number is not complete\";\n  } else if (creditCard.isValid) {\n    errors.cnumber = true;\n  } else {\n    errors.message = \"Credit card number is invalid\";\n  } //Cardholder Name Verification\n\n\n  if (values.cardName === null || !values.cardName.trim()) {\n    errors.message = \"Cardholder name is not complete\";\n  } else if (creditCard.cardholderName.isValid) {\n    errors.cname = true;\n  } else {\n    errors.message = \"Cardholder name is invalid\";\n  }\n\n  if (errors.ctype && errors.cname && errors.cnumber && errors.cexp && errors.cpostal && errors.ccvv) {\n    errors.variant = \"success\";\n    errors.message = \"Credit Card is valid\";\n  }\n\n  return errors;\n}\nw;","map":{"version":3,"sources":["E:/React Projects/react-website-v1-master/src/validateInfo.js"],"names":["valid","validateInfo","values","errors","creditCard","number","cardNumber","expirationDate","cardExpiration","cvv","cardSecurityCode","cardholderName","cardName","postalCode","cardPostalCode","show","variant","message","cname","cnumber","ctype","cexp","ccvv","cpostal","trim","isValid","cardType","card","type","toUpperCase","w"],"mappings":"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","sourcesContent":["import valid from \"card-validator\";\r\n\r\nexport default function validateInfo(values) {\r\n  let errors = {};\r\n  let creditCard = valid.number(values.cardNumber);\r\n\r\n  creditCard.expirationDate = valid.expirationDate(values.cardExpiration);\r\n  creditCard.cvv = valid.cvv(values.cardSecurityCode);\r\n  creditCard.cardholderName = valid.cardholderName(values.cardName);\r\n  creditCard.postalCode = valid.postalCode(values.cardPostalCode);\r\n\r\n  errors.show = true;\r\n  errors.variant = \"danger\";\r\n  errors.message = \"An unknown error occured. Please try again later\"\r\n  errors.cname = false;\r\n  errors.cnumber = false;\r\n  errors.ctype = false;\r\n  errors.cexp = false;\r\n  errors.ccvv = false;\r\n  errors.cpostal = false;\r\n\r\n  if (values.cardPostalCode === null || !values.cardPostalCode.trim()) {\r\n    errors.message = \"Credit card postal code is not complete\";\r\n  } else if (creditCard.postalCode.isValid) {\r\n    errors.cpostal = true;\r\n  } else {\r\n    errors.message = \"Credit card postal code is invalid\";\r\n  }\r\n\r\n  //Card CVV expiration\r\n  if (values.cardSecurityCode === null || !values.cardSecurityCode.trim()) {\r\n    errors.message = \"Credit card CVC is not complete\";\r\n  } else if (creditCard.cvv.isValid) {\r\n    errors.ccvv = true;\r\n  } else {\r\n    errors.message = \"Credit card CVC is invalid\";\r\n  }\r\n\r\n  //Card Expiration Verification\r\n  if (values.cardExpiration === null || !values.cardExpiration.trim()) {\r\n    errors.message = \"Credit card expiration date is not complete\";\r\n  } else if (creditCard.expirationDate.isValid) {\r\n    errors.cexp = true;\r\n  } else {\r\n    errors.message = \"Credit card expiration date is invalid\";\r\n  }\r\n\r\n  //Card Type Verification\r\n  if (\r\n    values.cardType === null ||\r\n    !values.cardType.trim() ||\r\n    creditCard.card === null\r\n  ) {\r\n    errors.message = \"Credit card type is not complete\";\r\n  } else if (\r\n    creditCard.card.type &&\r\n    creditCard.card.type.toUpperCase() === values.cardType.toUpperCase()\r\n  ) {\r\n    errors.ctype = true;\r\n  } else {\r\n    errors.message = \"Credit card type is invalid\";\r\n  }\r\n\r\n  //Card Number Verification\r\n  if (values.cardNumber === null || !values.cardNumber.trim()) {\r\n    errors.message = \"Credit card number is not complete\";\r\n  } else if (creditCard.isValid) {\r\n    errors.cnumber = true;\r\n  } else {\r\n    errors.message = \"Credit card number is invalid\";\r\n  }\r\n\r\n  //Cardholder Name Verification\r\n  if (values.cardName === null || !values.cardName.trim()) {\r\n    errors.message = \"Cardholder name is not complete\";\r\n  } else if (creditCard.cardholderName.isValid) {\r\n    errors.cname = true;\r\n  } else {\r\n    errors.message = \"Cardholder name is invalid\";\r\n  }\r\n\r\n  if (\r\n    errors.ctype &&\r\n    errors.cname &&\r\n    errors.cnumber &&\r\n    errors.cexp &&\r\n    errors.cpostal &&\r\n    errors.ccvv\r\n  ) {\r\n    errors.variant = \"success\";\r\n    errors.message = \"Credit Card is valid\";\r\n  }\r\n\r\n  return errors;\r\n}\r\nw"]},"metadata":{},"sourceType":"module"}